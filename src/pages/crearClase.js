import Head from 'next/head'
import Logo from '../images/Logo.png'
import Image from 'next/image'
import Manos from '../images/manos.jpg'
import styles2 from '@/styles/CrearUsuario.module.css'
import { useEffect, useState } from 'react'
import axios from 'axios';
import { useRouter } from 'next/router';


export default function CrearMonitorInfo() {
    const router = useRouter();
    const { employee_id } = router.query;
    const [employeesData, setEmployeesData] = useState([]);

    const initialFormData = {
        date: '',
        hour: '',
        duration: '',
        employee_id: '',
        class_name: '',
        num_places: ''
    }
    const [formData, setFormData] = useState({
        date: '',
        hour: '',
        duration: '',
        employee_id: '',
        class_name: '',
        num_places: ''
    });

    useEffect(() => {
        const fetchEmployeesData = async () => {
            try {
                const response = await axios.get(`http://127.0.0.1:8000/employees`);
                setEmployeesData(response.data.employees); // Assign the 'clients' array to usersData
            } catch (error) {
            }
        };
        fetchEmployeesData();
    }, [employee_id]);

    const handleEvent = (e) => {
        setFormData({
            ...formData,
            [e.target.name]: e.target.value,
        });
        console.log(e.target.value)
    }

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await axios.post('http://localhost:8000/classes', formData);
            console.log(response.data); // Assuming the API returns the created client data
            setFormData(initialFormData);
        } catch (error) {
            console.error(error);
        }

        setFormData(initialFormData)
        //router.push(`/paginaMonitor?employee_id=${employee_id}`)
    }

    const handleSubmit2 = async (e) => {
        console.log(formData)
        e.preventDefault();
    }

    function secondsToHHMM(seconds) {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
    }

    function hhmmToSeconds(hhmm) {
        const [hours, minutes] = hhmm.split(':').map(Number);
        return hours * 3600 + minutes * 60;
    }

    return (
        <>
            <Head>
                <title>Crear Clase</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <div className={styles2.backgroundContainer}>
                <Image src={Manos} alt="manos" className={styles2.imagenFondo} />
                <div className={styles2.backgroundCanvas}>
                    <div className={styles2.propContainer}>
                        <h2 className={styles2.formTitle}>Datos de la clase</h2>
                        <form className={styles2.formContainer} onSubmit={handleSubmit}>

                            <div className={styles2.formContainerInfo}>

                                <input
                                    className={styles2.formInput}
                                    name='date'
                                    type="date"
                                    placeholder='YYYY-MM-DD'
                                    value={formData.date}
                                    onChange={handleEvent}
                                    required
                                />
                                <input
                                    className={styles2.formInput}
                                    name='hour'
                                    type="time"
                                    placeholder='HH:mm'
                                    value={secondsToHHMM(formData.hour)}
                                    onChange={(e) => {
                                        const seconds = hhmmToSeconds(e.target.value);
                                        handleEvent({ ...e, target: { ...e.target, name: 'hour', value: seconds } });
                                    }}
                                    required
                                />
                                <select
                                    className={styles2.formInput}
                                    name="duration"
                                    value={formData.duration}
                                    onChange={(e) => {
                                        const valueAsInt = parseInt(e.target.value, 10);
                                        handleEvent({ ...e, target: { ...e.target, name: 'duration', value: valueAsInt } });
                                    }}
                                    required
                                >
                                    <option value="15">15 minutos</option>
                                    <option value="30">30 minutos</option>
                                    <option value="45">45 minutos</option>
                                    <option value="60">60 minutos</option>
                                    <option value="90">90 minutos</option>
                                </select>
                                <select
                                    className={styles2.formInput}
                                    name="employee_id"
                                    value={formData.employee_id}
                                    onChange={(e) => {
                                        const valueAsInt = parseInt(e.target.value, 10);
                                        handleEvent({ ...e, target: { ...e.target, name: 'employee_id', value: valueAsInt } });
                                    }}
                                    required
                                >
                                    {employeesData.map(employee => (
                                        <option key={employee.employee_id} value={employee.employee_id}>
                                            {employee.name} {employee.surname}
                                        </option>
                                    ))}
                                </select>
                                <input
                                    className={styles2.formInput}
                                    name='class_name'
                                    type="text"
                                    placeholder='Nombre'
                                    value={formData.class_name}
                                    onChange={handleEvent}
                                    required
                                />
                                <input
                                    className={styles2.formInput}
                                    name='num_places'
                                    type="number"
                                    min="0"
                                    max="25"
                                    step="1"
                                    placeholder='Enter a number'
                                    value={formData.num_places}
                                    onChange={(e) => {
                                        const valueAsInt = parseInt(e.target.value, 10);
                                        handleEvent({ ...e, target: { ...e.target, name: 'num_places', value: valueAsInt } });
                                    }}
                                    required
                                />

                            </div>
                            <button
                                className={styles2.redRoundButton}
                                type="submit"
                            >Crear Clase
                            </button>
                        </form>
                    </div>
                </div>
            </div>


        </>
    )
}

